{"version":3,"sources":["MovieContext.js","Nav.js","Movie.js","MovieList.js","AddMovie.js","App.js","serviceWorker.js","index.js"],"names":["MovieContext","createContext","MovieProvider","props","useState","name","price","id","movies","setMovies","Provider","value","children","Nav","useContext","class","length","Movie","MovieList","map","movie","key","AddMovie","setName","setPrice","onSubmit","e","preventDefault","prevMovies","type","onChange","target","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAEaA,G,MAAeC,2BAIfC,EAAgB,SAACC,GAAW,IAAD,EACRC,mBAAS,CACjC,CACIC,KAAK,eACLC,MAAM,MACNC,GAAK,OAET,CACIF,KAAK,kBACLC,MAAM,MACNC,GAAI,SAER,CACIF,KAAK,YACLC,MAAM,MACNC,GAAG,SAfyB,mBAC7BC,EAD6B,KACrBC,EADqB,KAmBpC,OACI,kBAACT,EAAaU,SAAd,CAAuBC,MAAQ,CAACH,EAAQC,IACnCN,EAAMS,WCTJC,EAbJ,WAAO,IAAD,EACcC,qBAAWd,GADzB,mBACNQ,EADM,UAGb,OACI,yBAAKO,MAAM,UACP,wBAAIA,MAAM,YAAV,eACA,uBAAGA,MAAM,aAAT,mBAAsCP,EAAOQ,UCK1CC,EAdF,SAAC,GAAiB,IAAhBZ,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MAEhB,OACI,6BACI,4BAAKD,GACL,2BAAIC,KCiBDY,EApBE,WAAM,IAAD,EACcJ,qBAAWd,GADzB,mBACPQ,EADO,UAEd,OAEA,6BACKA,EAAOW,KAAI,SAAAC,GAAK,OACb,kBAAC,EAAD,CAAOf,KAAOe,EAAMf,KAAMC,MAASc,EAAMd,MAAOe,IAAMD,EAAMb,U,OCwB7De,EA/BE,WAAO,IAAD,EACIlB,mBAAS,IADb,mBACZC,EADY,KACPkB,EADO,OAEMnB,mBAAS,IAFf,mBAEZE,EAFY,KAENkB,EAFM,OAGQV,qBAAWd,GAHnB,mBAGLS,GAHK,WAoBnB,OAEI,0BAAMgB,SAVO,SAAAC,GACbA,EAAEC,iBAEFlB,GAAU,SAAAmB,GAAU,4BAAQA,GAAR,CAAoB,CAACvB,KAAKA,EAAKC,MAAMA,UAQrD,2BAAOuB,KAAK,OAAOxB,KAAK,OAAOM,MAAQN,EAAMyB,SAlBlC,SAACJ,GAChBH,EAAQG,EAAEK,OAAOpB,UAkBb,2BAAOkB,KAAK,OAAOxB,KAAK,QAAQM,MAAOL,EAAOwB,SAhBlC,SAACJ,GACjBF,EAASE,EAAEK,OAAOpB,UAgBd,4CCNGqB,MAbf,WAEE,OACE,kBAAC,EAAD,KACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f91434e3.chunk.js","sourcesContent":["import React,{useState,createContext} from 'react';\r\n// to initiate context,\r\nexport const MovieContext = createContext();\r\n// we need to import this ^ so that we can use it in diff components.\r\n// movieprovider's job is basically to hold some info, and then pass it down to all the diff components that we want .to. \r\n\r\nexport const MovieProvider = (props) => {\r\n    const [movies, setMovies] = useState([\r\n        {\r\n            name:'Harry Potter',\r\n            price:'$10',\r\n            id : 23124\r\n        },\r\n        {\r\n            name:'Game of Thrones',\r\n            price:'$10',\r\n            id: 2566124\r\n        },\r\n        {\r\n            name:'Inception',\r\n            price:'$10',\r\n            id:23524\r\n        }\r\n    ])\r\n\r\n    return(\r\n        <MovieContext.Provider value= {[movies, setMovies]}>\r\n            {props.children}\r\n        </MovieContext.Provider>\r\n    );\r\n\r\n}\r\n\r\n// this movieprovider is providing the info to the small components that are wrapped by MovieContext.Provider\r\n\r\n\r\n\r\n\r\n// not export default as we need to export two items !","import React,{useContext} from 'react';\r\nimport './Nav.css'\r\nimport {MovieContext} from './MovieContext';\r\n\r\n\r\nconst Nav =() => {\r\n    const [movies,setMovies] = useContext(MovieContext)\r\n\r\n    return (\r\n        <div class=\"navbar\">\r\n            <h3 class=\"navtitle\">karthikstar</h3>\r\n            <p class=\"listtitle\">List of Movies: {movies.length}</p>\r\n        </div>\r\n// we need to wrap the child elements with a overall div\r\n// we can only return one element !\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n\r\n","import React from 'react';\r\n\r\nconst Movie =({name,price}) =>{\r\n\r\n    return (\r\n        <div>\r\n            <h3>{name}</h3>\r\n            <p>{price}</p>\r\n        </div>\r\n// we need to wrap the child elements with a overall div\r\n// we can only return one element !\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Movie;\r\n\r\n","import React,{ useState, useContext } from 'react';\r\nimport Movie from './Movie';\r\nimport {MovieContext} from './MovieContext'\r\n\r\nconst MovieList =() =>{\r\n        const [movies, setMovies] = useContext(MovieContext)\r\n        return (\r\n        \r\n        <div>\r\n            {movies.map(movie => (\r\n                <Movie name= {movie.name} price = {movie.price} key= {movie.id}/>\r\n            ))}\r\n\r\n        </div>\r\n// we need to wrap the child elements with a overall div\r\n// we can only return one element !\r\n// each child in a list shld have a unique key. hence to resolve this error pass in a key prop to the component.\r\n\r\n    )\r\n}\r\n\r\n// how do we pass the movies and their information to the movie component?\r\n// thru PROPS!\r\n\r\nexport default MovieList\r\n","import React,{useState, useContext} from 'react';\r\nimport {MovieContext} from './MovieContext'\r\n\r\nconst AddMovie = () => {\r\n    const [name,setName] = useState('')\r\n    const [price,setPrice] = useState('')\r\n    const [movies,setMovies] = useContext(MovieContext)\r\n\r\n    const updateName = (e) =>{\r\n        setName(e.target.value)\r\n    }\r\n    const updatePrice = (e) =>{\r\n        setPrice(e.target.value)\r\n    }\r\n\r\n    const addMovie = e =>{\r\n        e.preventDefault();\r\n        // prevents the page from refreshing when we click on the form\r\n        setMovies(prevMovies => [...prevMovies, {name:name,price:price}])\r\n        // here, we have access to the latest rendered movie list (prevMovies)\r\n        // prevMovies - gives the latest information about the state.\r\n    }\r\n    \r\n    return (\r\n        \r\n        <form onSubmit={addMovie}>\r\n            <input type=\"text\" name=\"name\" value ={name} onChange={updateName}/>\r\n            <input type=\"text\" name=\"price\" value={price} onChange={updatePrice}/>\r\n            <button>Submit</button>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default AddMovie;","import React from 'react';\nimport './App.css';\nimport Nav from './Nav'\nimport MovieList from './MovieList'\nimport AddMovie from './AddMovie'\nimport {MovieProvider} from './MovieContext'\n// since we are not using export default in moviecontext.js as we hav ae 2 items, so we need make sure to use curly braces - destructuring syntax to jjust get MovieProvider\n\n\nfunction App() {\n\n  return (\n    <MovieProvider>\n      <div className=\"App\">\n        <Nav/>\n        <AddMovie/>\n        <MovieList/>\n      </div>\n    </MovieProvider>\n  );\n}\n\nexport default App;\n\n// we are rendering a nav and a movielist, they have nth to do w each other\n// however, here i want to render the number of items in movielist, in the nav. but we cant do that as we can only pass props.\n// the only way to pass state to components is thru props.\n// so one way would be to lift up the state, aka take the state obj in the movielist to app.js instead, and pass down state as props to both nav and movielist\n// prob is we will end up having a lot of state in the app component whioch doesnt belong to the app component\n\n// we will end up doing prop drilling - passing down props all the way down to the desired component\n// eg take movies pass down to movielist, then movielist passes down again to movie \n// so we WONT use this method. \n\n// instead use state management - context API - check out MovieContext.js to see how a context is created\n// can check out Nav.js and Movielist.js to see how they imported the context and used it.\n\n\n// context API is good when we want to just render out information eg movies.length \n// all the comps that use the context which is updated, will re-render.\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}